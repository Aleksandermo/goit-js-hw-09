{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIbQ,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAASC,GAC9DA,EAAMC,iBACN,MAAMC,EAAW,IAAIC,SAASH,EAAMI,QAC9BC,EAAQC,SAASJ,EAASK,IAAI,UAC9BC,EAAOF,SAASJ,EAASK,IAAI,SAC7BE,EAASH,SAASJ,EAASK,IAAI,WAErC,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAE/BvB,EAAcuB,EAAI,EADGL,EAASK,EAAIF,GAE/BG,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,MAAU,IAEzE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOG,QAAQ,sBAAoB5B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Fulfill\n      } else {\n        reject({ position, delay }); // Reject \n      }\n    }, delay);\n  });\n}\n\ndocument.querySelector('.form').addEventListener('submit', function(event) {\n      event.preventDefault();\n      const formData = new FormData(event.target);\n      const delay = parseInt(formData.get('delay'));\n      const step = parseInt(formData.get('step'));\n      const amount = parseInt(formData.get('amount'));\n\n      for (let i = 0; i < amount; i++) {\n        const currentDelay = delay + (i * step);\n        createPromise(i + 1, currentDelay)\n          .then(({ position, delay }) => {\n            Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          })\n          .catch(({ position, delay }) => {\n             Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n          });\n      }\n    });"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","formData","FormData","target","delay1","parseInt","get","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.8b566a41.js.map"}